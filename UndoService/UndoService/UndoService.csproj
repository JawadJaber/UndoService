<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
    <Authors>Peter Dongan</Authors>
    <Company />
    <PackageLicenseFile></PackageLicenseFile>
    <Description>Simple undo/redo service based on the momento pattern. It uses delegates to access state. It can track changes to different parts of the application individually, while using one unified interface for performing undo/redo. This reduces the memory imprint and facilitates modular design. See the unit tests in the source repository for examples of how to use.</Description>
    <Copyright>Peter Dongan</Copyright>
    <PackageProjectUrl>https://peterdongan.github.io/UndoService/</PackageProjectUrl>
    <RepositoryType>Git</RepositoryType>
    <PackageTags>undo redo momento service .net</PackageTags>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <RepositoryUrl>https://github.com/peterdongan/UndoService</RepositoryUrl>
    <AssemblyVersion>2.3.1.0</AssemblyVersion>
    <FileVersion>2.3.1.0</FileVersion>
    <PackageReleaseNotes>Added IsStateChanged flag and ClearIsStateChangedFlag() method. The intended use of these is to tell if there are unsaved changes.

ClearStacks() deprecated. Reset() method added for use instead. This performs the same function but also the IsStateChanged flag.

ClearStackInvoked event added. This may help debugging, 

CanUndoChanged and CanRedoChanged events added. These can be used to enable/disable corresponding UI controls.

Informative exceptions added. Some comments reworded for clarity.

Fixed issue where the redo stack was not being cleared in an aggregate when a new state is recorded by a subservice.</PackageReleaseNotes>
    <Version>2.3.1</Version>
    <PackageIconUrl />
    <NeutralLanguage>en-IE</NeutralLanguage>
    <RootNamespace>StateManagement</RootNamespace>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DocumentationFile>C:\Users\peter\source\repos\UndoService2\UndoService\UndoService\UndoService.xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <Optimize>false</Optimize>
    <WarningLevel>0</WarningLevel>
    <DocumentationFile>C:\Users\peter\source\repos\UndoService2\UndoService\UndoService\UndoService.xml</DocumentationFile>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="LICENCE.txt" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.FxCopAnalyzers" Version="2.9.6">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.CodeQuality.Analyzers" Version="2.9.6">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Resources.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>

</Project>
